# =============================================================================
# Local LLM Proxy - Environment Configuration
# =============================================================================
# Copy this file to .env and configure with your actual values
#
# This configuration supports RBC corporate network environments with:
# - Custom SSL/TLS certificates
# - OAuth 2.0 authentication
# - Enterprise endpoint integration
# =============================================================================

# -----------------------------------------------------------------------------
# PROXY CONFIGURATION (Local Server Settings)
# -----------------------------------------------------------------------------

# Port for the proxy server to listen on
PROXY_PORT=3000

# Base URL for the proxy (used in configuration display)
# For local development: http://localhost:3000
# For production: your actual proxy URL
PROXY_BASE_URL=http://localhost:3000

# Static access token for clients to authenticate with the proxy
# This is the token your applications will use to connect to the proxy
# If not set, a random token will be generated on startup
# IMPORTANT: Set this in production for consistent token across restarts
PROXY_ACCESS_TOKEN=llm-proxy-your-static-token-here

# -----------------------------------------------------------------------------
# TARGET ENDPOINT CONFIGURATION (Your Actual LLM Service)
# -----------------------------------------------------------------------------

# URL of your actual LLM endpoint
# This is where the proxy will forward requests to
TARGET_ENDPOINT=https://your-llm-endpoint.com/v1

# -----------------------------------------------------------------------------
# AUTHENTICATION METHOD 1: Simple API Key (Optional)
# -----------------------------------------------------------------------------
# Use this if your target endpoint uses simple Bearer token authentication
# Either use this OR OAuth (below), not both

# API key for authenticating with the target endpoint
# TARGET_API_KEY=sk-your-target-api-key-here

# -----------------------------------------------------------------------------
# AUTHENTICATION METHOD 2: OAuth 2.0 Client Credentials (Optional)
# -----------------------------------------------------------------------------
# Use this if your target endpoint requires OAuth token authentication
# Either use this OR simple API key (above), not both

# OAuth token endpoint URL
# Example: https://auth.your-service.com/oauth/token
# OAUTH_TOKEN_ENDPOINT=https://your-oauth-endpoint.com/token

# OAuth client ID
# OAUTH_CLIENT_ID=your-client-id

# OAuth client secret
# OAUTH_CLIENT_SECRET=your-client-secret

# OAuth scope (optional, depends on your OAuth server)
# OAUTH_SCOPE=api.read api.write

# How many minutes before token expiry to refresh (default: 5)
# If your tokens expire every hour, set this to 5 to refresh at 55 minutes
# OAUTH_REFRESH_BUFFER_MINUTES=5

# -----------------------------------------------------------------------------
# SSL/TLS CERTIFICATES (For Corporate Networks - RBC Security Equivalent)
# -----------------------------------------------------------------------------
# These settings replicate the functionality of Python's rbc_security package
# for Node.js environments. Configure custom SSL certificates for corporate
# network environments.

# Path to CA certificate bundle (PEM format)
# This is the certificate authority bundle that your corporate network uses
# Example: /path/to/ca-bundle.crt or /etc/ssl/certs/ca-certificates.crt
# SSL_CA_CERT_PATH=/path/to/ca-bundle.crt

# Path to client certificate (PEM format) - for mTLS authentication
# SSL_CLIENT_CERT_PATH=/path/to/client-cert.pem

# Path to client private key (PEM format) - for mTLS authentication
# SSL_CLIENT_KEY_PATH=/path/to/client-key.pem

# SSL certificate verification (0 = disabled, 1 = enabled)
# WARNING: Only disable for development/testing. NEVER in production!
# If you're having SSL issues in development, set this to 0
# NODE_TLS_REJECT_UNAUTHORIZED=1

# -----------------------------------------------------------------------------
# OPERATING MODE
# -----------------------------------------------------------------------------

# Set to 'true' to use placeholder/mock responses for testing
# Set to 'false' to forward requests to the target endpoint
# Default: false (will forward to target)
USE_PLACEHOLDER_MODE=false

# =============================================================================
# CONFIGURATION EXAMPLES
# =============================================================================

# Example 1: Local testing with placeholder responses
# ----------------------------------------------------
# PROXY_PORT=3000
# PROXY_ACCESS_TOKEN=test-token-12345
# USE_PLACEHOLDER_MODE=true

# Example 2: RBC Work Environment (OAuth + SSL Certificates)
# -----------------------------------------------------------
# PROXY_PORT=3000
# PROXY_BASE_URL=http://localhost:3000
# PROXY_ACCESS_TOKEN=llm-proxy-rbc-token-abc123
# TARGET_ENDPOINT=https://your-rbc-llm-endpoint.com/v1
# OAUTH_TOKEN_ENDPOINT=https://auth.rbc.com/oauth/token
# OAUTH_CLIENT_ID=your-rbc-client-id
# OAUTH_CLIENT_SECRET=your-rbc-client-secret
# OAUTH_REFRESH_BUFFER_MINUTES=5
# SSL_CA_CERT_PATH=/path/to/rbc-ca-bundle.crt
# USE_PLACEHOLDER_MODE=false

# Example 3: Production with simple API key
# ------------------------------------------
# PROXY_PORT=3000
# PROXY_BASE_URL=https://llm-proxy.yourcompany.com
# PROXY_ACCESS_TOKEN=llm-proxy-production-token-abc123
# TARGET_ENDPOINT=https://api.openai.com/v1
# TARGET_API_KEY=sk-your-openai-key-here
# USE_PLACEHOLDER_MODE=false

# =============================================================================
# NOTES
# =============================================================================
# - The proxy will auto-generate PROXY_ACCESS_TOKEN if not set
# - OAuth will auto-refresh tokens before they expire
# - SSL certificates are configured automatically from environment variables
# - Set USE_PLACEHOLDER_MODE=true for testing without a real endpoint
# - View your configuration at the dashboard: http://localhost:3000
#
# For RBC environments:
# - SSL certificates are typically required for corporate network access
# - OAuth credentials should be obtained from your team lead
# - Contact your IT department for CA certificate bundle location
# - The proxy replicates Python's rbc_security.enable_certs() functionality
